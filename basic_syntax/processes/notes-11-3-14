Aim: Are your processes running? Then you should go out nad catch them!s

Do NOw: Run the commnad ps in a terminal. What do you see?

ps shows all of the processes that are running.


Processes
	Every running program is a process. A process can create subprocesses, but these are no different from regular processes.

	A processor can handle 1 process per cycle (per core).
	"Multitasking" appears to happen because the processor switches between all the active processing quickly.



	pid
		Ever process has a unique identifier called the pid.
		pid 1 is the init process.
		Each entry in the /proc directory is a current pic.

	getpid() - <unistd.h>
		 return the current process' pid


	fork() - <unistd.h>
	       Creates a separate process based on the current process.
	       The next process is called the child, and the original one is called the parent.
	       
	       The child process is a duplicate of the parent process. All parts of the parent process are copied, incldin stack and heap memory, nad the file table.
	       If you fork twice, it's not going to make a fork of the child; it's going to make another fork of the original parent.



THREAD VS PROCESS
Process-- Standalone executable entity.
	  The parent has no bearing on the child process.
	  It has its own memory space and file table.
Thread -- It's also a separate executable entity.
          However, threads can't exist without the parent process that created them.
	  They use the memory and file table of the original.



The usage of fork

int main() {
    int f;
    f = fork()
    
    if( !f ) {
    	printf("I'm the child");
    } else {
        sleep(2); //Make sure that the child process runs first.
        printf("I'm the parent!");
    }	

    printf("pid : %d \t f = %d\n",getPID(),f);
    //Will print 2 pid's
    return 0;
}

The result of this is:
pid: 25258    f: 25259
pid: 25259    f: 0

forkbomb: while(1) fork()

If a parent process ends before the child, the child's new parent process is 1.

   getppid() - <unistd.h>
   	     Gets the parent id.


When running things in bash:
	Say a.out has the parent function print something, while the child sleeps for 2 seconds then prints.
	If you <C> c before the child process runs, it doens't affect the child at all. It's still oging to print.




Aim: Waiting for Godot

	wait - <unistd.h>
		Stops a parent process from running unitl any child has provded status information to hte parent (usually the child has exited).

		Returns the pid of the child that exited, or -1.

	wait (int *status)
		The parameter (n) is used to store information about how the process exited.
		
		WEXITSTATUS(status) //This is a preprocessor macro.
			It's going to return the actual return value of main.
			Usually return a 0, but you can use the status to pass messages between processes when one ends.
			You can also do something to wait for specific children.





int status;
int w;

w = wait( &status);
           
           
           
           
           
           
 
           
Aim: Waiting for the executioner.

Better version of doing stuff:

void childs_play(int f, int s) {
	sleep(s);
	printf("hiurr");
	exit(s * 2);
}
void parents_work(int f, int s) {
	exit(5);
}

int main() {
	int f, status, w;

	f = fork();

	if (f) {
		parents_work();
	} else {
		childs_play();
	

}
        





Different macros for the exit() command.
	WIFEXITED(status)
	WIFSIGNALED(status)
	WTERMSIG(status)
	WCOREDUMP(status)
		If WIFSIGNALED(status) ->







	waitpid - <unistd.h>
		Waits for a specific child

		waitpid(pid, status, options)
			pid: The pid of the specific child to look for.
				If it's -1, it will wait for any child.
			status: &status -> stores the status in here.

			options: It can specify different actions to see what you want to wait for.   






	The exec family - <unistd.h>
		There are a number of c functions that can be used to run other prgrams from within our own programs.

		Replaces the current process with the new process with the new program, any code after a call to an exec function will be ignored.

		execl
			execl(<PATH>, <COMMAND>, <ARGS>, NULL)		
			PATH : The path to the program (ex: "/bin/ls")

			COMMAND: THe name of the program (ex: "ls")

			ARGS: Each commnad line argument you with to give the program.
				The last argument must be NULL

			Example: execl("/bin/ls/", "ls", "-a", "-l", NULL )

			When it's run, you lose control of the host process-- if you ran the above code, ls would run, end, and the process that you ran execl in would never run anything after exec.
			Therefore, the better method of doing this would be to make a child process and do things from there.


		


		execlp(<PATH>, <COMMAND>, <ARGS>, NULL)

			Works like execl, except it uses the PATH environment variable for command,s so you can use "ls" as the PATH instead of "/bin/ls"
			Ex:
			execlp("ls","ls","-a","-l",NULL);
			

		execvp( <PATH>, <ARGUMENT ARRAY>)

			Argument array
				Array of strings, with element 0 must be the name of the program to be executed and the last element must be null.
				
			Like execlp, the PATH argument will take the PATH environment variable into account.




AIM: Sending mixed signals can be deadly.

IPC : Inter-Process-Communication

1) Signals
	Int sent to a process.
	The Int coresponds ot a signal #

	Kill
		Sends a signal to a process.
		Kill -<SIGNO> <PID>
	
	Some of the more comonly used signlas:
	1) HUP (Hang up)
	2) Int
	3) QUIT
	4) ABRT
	9) KILL


Signals in c
#include <signal.h>

static void sighandler( int signo ){ <--- usually named signo
       //it can only be accessed by the file that its in.
       //This is important because you want signal handlers to be exclusive to processes/files.

       if ( signo == SIGKILL ) {
       	  printf("ahhh, you got me!");
       } else if ( signo == SIGINT ) {
       	  printf("Nice try! \n");
       }
}

int main() {
    signal( SIGKILL, sighandler);
    signal( SIGINT, sighandler);
    



int kill (pid_t pid, int sig)













 
