File IO


open - <fcntl.h>
     Add a file to the file table and returns its file descriptor.

     If open fails, -1 si returned, extra error information can be found in errno
     	errno is an int variable that can be found in <errno.h>, using strerror (in string.h) on errno will return a string description of the error.

     open( <PATH>, <FLAGS>, <MODE> )
     	   
	   FLAG
		For all of them : man 2 lock
		O_RDONLY - read only.
		O_WRONLY - write only.
		O_RDWR - Read and write
		O_APPEND - You're only adding.
		O_TRUNC - Delete its contents and rewrite
		O_CREAT - create a new file.
		O_EXCL - When combined with O_CREAT, will return an error if the file exists.

		Examples : 
		int fd;
		fd = open("foo.txt", O_CREAT | O_EXCL, 644) //Bitwise or

     	   MODE - only used when you're creating a new file (you put permissions here)
	   	You set the permissions with a 3 digit octal number
		
		Octal numbers lead with a 0.
		0644, 0777


     close( <unistd.h> )
     	    Remove a file from the file table.
	    Returns 0 if successful. Returns -1 and set errno if unsuccessful.

	    close( <FILE DESCRIPTOR> )

     READ - <unistd.h>
     	  Read in data from a file.
	  
	  read( <FILE DESCRIPTOR>, < <AMOUNT> )
	  read( fd, buff, n)

	  Read n bytes form the fd's file and put taht data into buff.

	  Returns the number of bytes actually read. Returns -1 nd sets errno if unsuccessful.
	  BUFFER must be a pointer.

     WRITE - <unistd.h>
     	  Write into a file.

	  write( <FILE DESCRIPTOR>, <BUFFER>, <AMOUNT> )


     umask - <sys/stat.h>
     	  
	  Set the file creation permission mask
	 
	  By default, created fiels are not given the exact permissions provided in the mode argument to open.

	  A mask is applied that automatically shuts off certain permissions.

	  umask is applied by using bitwise negation on the mask, then bitwise anding it to the mask.
	  	new_permissions = ~mask & mode

	  umask( <MASK> );
	  	 You can defin teh umask using a 3 digit octal #.
	  	 To not restrict any permissions : umask(0000);

      lseek - <unistd.h>
      	  Set the current position in a file.
	  
	  lseek( <FILE DESCRIPTOR>, <OFFSET>, <WHENCE> )

	  offset
		Number of bytes to move the position by.

	  whence
		Where are you measuring the offset from, and from which direction
		
		Whence Constants: 

		SEEK_SET
			offset is evaluated from the beginnign of the file.
		SEEK_CUR
			offset is relative to teh current position in the file.
		SEEK_END
			offset is evaluated from the end of the file.
	l
	lseek returns the current offset from the beginning of the file.

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
//file control; needed for open() and close()

#include <errno.h>
//needed to use the int variable "errno" (error number), which contains information about errors resultant of using open() or close()

#include <string.h>
//needed to use strerror(errno), which will convert the error number into English words

int main(){

	int fd;
	fd = open("foo",0_RDONLY);
	//open returns the file descriptor of a file; here, of foo
	//if there is a problem opening the file, open() will return -1 (since that can't be a descriptor)
	//O_RDONLY means "open for reading only"

	if ( fd >= 0) {
	   printf("file descriptor: %d\n",fd);
	} else { 
		printf("error number: %d\n",errno);
		printf("meaning of error number: %s\n",strerror(errno));
	}
	close(foo);
	//good habit

	return 0;
}




